package com.ordermanagement.api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.ordermanagement.dto.*;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class HttpApiClient {
    private final String baseUrl;
    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;
    
    public HttpApiClient(String baseUrl) {
        this.baseUrl = baseUrl;
        this.httpClient = HttpClient.newHttpClient();
        this.objectMapper = new ObjectMapper();
        this.objectMapper.registerModule(new JavaTimeModule());
    }
    
    public HttpApiClient() {
        this("http://localhost:8080");
    }
    
    // Customer endpoints
    public CustomerDto loginCustomer(String email, String password) throws IOException {
        Map<String, String> loginData = new HashMap<>();
        loginData.put("email", email);
        loginData.put("password", password);
        
        return post("/api/customers/login", loginData, CustomerDto.class);
    }
    
    public CustomerDto registerCustomer(String email, String password, String name, String phone) throws IOException {
        Map<String, String> registerData = new HashMap<>();
        registerData.put("email", email);
        registerData.put("password", password);
        registerData.put("name", name);
        registerData.put("phone", phone);
        
        return post("/api/customers/register", registerData, CustomerDto.class);
    }
    
    // Product endpoints
    public List<ProductDto> getAllProducts() throws IOException {
        return get("/api/products", new TypeReference<List<ProductDto>>() {});
    }
    
    public List<ProductDto> getProductsByCategory(String category) throws IOException {
        return get("/api/products/category/" + category, new TypeReference<List<ProductDto>>() {});
    }
    
    public ProductDto getProductById(Long id) throws IOException {
        return get("/api/products/" + id, ProductDto.class);
    }
    
    // Order endpoints
    public OrderDto createOrder(Long customerId, AddressDto deliveryAddress) throws IOException {
        Map<String, Object> orderData = new HashMap<>();
        orderData.put("customerId", customerId);
        orderData.put("deliveryAddress", deliveryAddress);
        
        return post("/api/orders", orderData, OrderDto.class);
    }
    
    public OrderDto addItemToOrder(Long orderId, Long productId, int quantity, String observations) throws IOException {
        Map<String, Object> itemData = new HashMap<>();
        itemData.put("productId", productId);
        itemData.put("quantity", quantity);
        itemData.put("observations", observations);
        
        return post("/api/orders/" + orderId + "/items", itemData, OrderDto.class);
    }
    
    public OrderDto finalizeOrder(Long orderId, String paymentMethod, BigDecimal deliveryFee) throws IOException {
        Map<String, Object> finalizeData = new HashMap<>();
        finalizeData.put("paymentMethod", paymentMethod);
        // deliveryFee is now automatically generated by the server

        return post("/api/orders/" + orderId + "/finalize", finalizeData, OrderDto.class);
    }
    
    public OrderDto cancelOrder(Long orderId, String reason) throws IOException {
        Map<String, String> cancelData = new HashMap<>();
        cancelData.put("reason", reason);
        
        return post("/api/orders/" + orderId + "/cancel", cancelData, OrderDto.class);
    }
    
    public List<OrderDto> getOrdersByCustomer(Long customerId) throws IOException {
        return get("/api/orders/customer/" + customerId, new TypeReference<List<OrderDto>>() {});
    }
    
    public OrderDto getOrderById(Long orderId) throws IOException {
        return get("/api/orders/" + orderId, OrderDto.class);
    }

    public CustomerDto findCustomerByEmail(String email) throws IOException {
        try {
            return get("/api/customers/email/" + email, CustomerDto.class);
        } catch (IOException e) {
            // If returns 404, it means not found
            if (e.getMessage().contains("404")) {
                return null;
            }
            throw e;
        }
    }
    
    // Generic HTTP methods
    private <T> T get(String endpoint, Class<T> responseType) throws IOException {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + endpoint))
                .header("Content-Type", "application/json")
                .GET()
                .build();
                
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() >= 400) {
                handleErrorResponse(response);
            }
            
            return objectMapper.readValue(response.body(), responseType);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IOException("Request interrupted", e);
        }
    }
    
    private <T> T get(String endpoint, TypeReference<T> responseType) throws IOException {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + endpoint))
                .header("Content-Type", "application/json")
                .GET()
                .build();
                
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() >= 400) {
                handleErrorResponse(response);
            }
            
            return objectMapper.readValue(response.body(), responseType);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IOException("Request interrupted", e);
        }
    }
    
    private <T> T post(String endpoint, Object requestBody, Class<T> responseType) throws IOException {
        try {
            String jsonBody = objectMapper.writeValueAsString(requestBody);
            
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + endpoint))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
                
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() >= 400) {
                handleErrorResponse(response);
            }
            
            return objectMapper.readValue(response.body(), responseType);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new IOException("Request interrupted", e);
        }
    }
    
    private void handleErrorResponse(HttpResponse<String> response) throws IOException {
        try {
            Map<String, String> errorBody = objectMapper.readValue(response.body(), Map.class);
            String errorMessage = errorBody.get("error");
            throw new IOException(errorMessage != null ? errorMessage : "HTTP " + response.statusCode());
        } catch (Exception e) {
            throw new IOException("HTTP " + response.statusCode() + ": " + response.body());
        }
    }
    
    public void close() throws IOException {
        // HttpClient doesn't need explicit closing in Java 11+
    }
}